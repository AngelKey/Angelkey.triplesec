// Generated by IcedCoffeeScript 1.6.3-f
(function() {
  var AES, Base, Encryptor, SHA512, TwoFish, V, WordArray, ctr, encrypt, hmac, iced, pbkdf2, salsa20, util, __iced_k, __iced_k_noop,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  WordArray = require('./wordarray').WordArray;

  salsa20 = require('./salsa20');

  AES = require('./aes').AES;

  TwoFish = require('./twofish').TwoFish;

  ctr = require('./ctr');

  hmac = require('./hmac');

  SHA512 = require('./sha512').SHA512;

  pbkdf2 = require('./pbkdf2').pbkdf2;

  util = require('./util');

  exports.V = V = {
    "1": {
      header: [0x1c94d7de, 1],
      pbkdf2_iters: 2048,
      salt_size: 8
    }
  };

  exports.Base = Base = (function() {
    function Base(_arg) {
      var key;
      key = _arg.key;
      this.key = WordArray.from_buffer(key);
      this.derived_keys = {};
    }

    Base.prototype.pbkdf2 = function(salt, cb) {
      var end, i, k, key, keys, len, lens, raw, salt_hex, tot, v, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      salt_hex = salt.to_hex();
      (function(__iced_k) {
        if ((keys = _this.derived_keys[salt_hex]) == null) {
          lens = {
            hmac: hmac.HMAC.keySize,
            aes: AES.keySize,
            twofish: TwoFish.keySize,
            salsa20: salsa20.Salsa20.keySize
          };
          tot = 0;
          for (k in lens) {
            v = lens[k];
            tot += v;
          }
          key = _this.key.clone();
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/enc.iced",
              funcname: "Base.pbkdf2"
            });
            pbkdf2({
              key: key,
              salt: salt,
              c: _this.version.pbkdf2_iters,
              dkLen: tot
            }, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return raw = arguments[0];
                };
              })(),
              lineno: 50
            }));
            __iced_deferrals._fulfill();
          })(function() {
            keys = {};
            i = 0;
            for (k in lens) {
              v = lens[k];
              len = v / 4;
              end = i + len;
              keys[k] = new WordArray(raw.words.slice(i, end));
              i = end;
            }
            return __iced_k(_this.derived_keys[salt_hex] = keys);
          });
        } else {
          return __iced_k();
        }
      })(function() {
        return cb(keys);
      });
    };

    Base.prototype.sign = function(_arg, cb) {
      var input, key, out, salt, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      input = _arg.input, key = _arg.key, salt = _arg.salt;
      input = (new WordArray(this.version.header)).concat(salt).concat(input);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/enc.iced",
          funcname: "Base.sign"
        });
        hmac.bulk_sign({
          key: key,
          input: input
        }, {
          cb: __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return out = arguments[0];
              };
            })(),
            lineno: 66
          })
        });
        __iced_deferrals._fulfill();
      })(function() {
        return cb(out);
      });
    };

    Base.prototype.run_salsa20 = function(_arg, cb) {
      var ct, input, iv, key, output_iv, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      input = _arg.input, key = _arg.key, iv = _arg.iv, output_iv = _arg.output_iv;
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/enc.iced",
          funcname: "Base.run_salsa20"
        });
        salsa20.bulk_encrypt({
          input: input,
          key: key,
          iv: iv
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return ct = arguments[0];
            };
          })(),
          lineno: 72
        }));
        __iced_deferrals._fulfill();
      })(function() {
        if (output_iv) {
          ct = iv.clone().concat(ct);
        }
        return cb(ct);
      });
    };

    Base.prototype.run_twofish = function(_arg, cb) {
      var block_cipher, ct, input, iv, key, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      input = _arg.input, key = _arg.key, iv = _arg.iv;
      block_cipher = new TwoFish(key);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/enc.iced",
          funcname: "Base.run_twofish"
        });
        ctr.bulk_encrypt({
          block_cipher: block_cipher,
          iv: iv,
          input: input
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return ct = arguments[0];
            };
          })(),
          lineno: 80
        }));
        __iced_deferrals._fulfill();
      })(function() {
        return cb(iv.clone().concat(ct));
      });
    };

    Base.prototype.run_aes = function(_arg, cb) {
      var block_cipher, ct, input, iv, key, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      input = _arg.input, key = _arg.key, iv = _arg.iv;
      block_cipher = new AES(key);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/enc.iced",
          funcname: "Base.run_aes"
        });
        ctr.bulk_encrypt({
          block_cipher: block_cipher,
          iv: iv,
          input: input
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return ct = arguments[0];
            };
          })(),
          lineno: 87
        }));
        __iced_deferrals._fulfill();
      })(function() {
        return cb(iv.clone().concat(ct));
      });
    };

    Base.prototype.scrub = function() {
      var key, key_ring, salt, _ref, _results;
      this.key.scrub();
      _ref = this.derived_keys;
      _results = [];
      for (salt in _ref) {
        key_ring = _ref[salt];
        _results.push((function() {
          var _i, _len, _results1;
          _results1 = [];
          for (_i = 0, _len = key_ring.length; _i < _len; _i++) {
            key = key_ring[_i];
            _results1.push(key.scrub());
          }
          return _results1;
        })());
      }
      return _results;
    };

    return Base;

  })();

  exports.Encryptor = Encryptor = (function(_super) {
    __extends(Encryptor, _super);

    Encryptor.prototype.version = V[1];

    function Encryptor(_arg) {
      var key;
      key = _arg.key, this.rng = _arg.rng;
      Encryptor.__super__.constructor.call(this, {
        key: key
      });
      this.last_salt = null;
    }

    Encryptor.prototype.pick_random_ivs = function(cb) {
      var iv_lens, ivs, k, v;
      iv_lens = {
        aes: AES.ivSize,
        twofish: TwoFish.ivSize,
        salsa20: salsa20.Salsa20.ivSize
      };
      ivs = {};
      for (k in iv_lens) {
        v = iv_lens[k];
        ivs[k] = WordArray.from_buffer(this.rng(v));
      }
      return cb(ivs);
    };

    Encryptor.prototype.resalt = function(cb) {
      var ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      this.salt = WordArray.from_buffer(this.rng(this.version.salt_size));
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/enc.iced",
          funcname: "Encryptor.resalt"
        });
        _this.pbkdf2(_this.salt, __iced_deferrals.defer({
          assign_fn: (function(__slot_1) {
            return function() {
              return __slot_1.keys = arguments[0];
            };
          })(_this),
          lineno: 139
        }));
        __iced_deferrals._fulfill();
      })(function() {
        return cb();
      });
    };

    Encryptor.prototype.run = function(data, cb) {
      var ct1, ct2, ct3, ivs, pt, ret, sig, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(__iced_k) {
        if (_this.salt == null) {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/enc.iced",
              funcname: "Encryptor.run"
            });
            _this.resalt(__iced_deferrals.defer({
              lineno: 147
            }));
            __iced_deferrals._fulfill();
          })(__iced_k);
        } else {
          return __iced_k();
        }
      })(function() {
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "src/enc.iced",
            funcname: "Encryptor.run"
          });
          _this.pick_random_ivs(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return ivs = arguments[0];
              };
            })(),
            lineno: 148
          }));
          __iced_deferrals._fulfill();
        })(function() {
          pt = WordArray.from_buffer(data);
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/enc.iced",
              funcname: "Encryptor.run"
            });
            _this.run_salsa20({
              input: pt,
              key: _this.keys.salsa20,
              iv: ivs.salsa20,
              output_iv: true
            }, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return ct1 = arguments[0];
                };
              })(),
              lineno: 150
            }));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "src/enc.iced",
                funcname: "Encryptor.run"
              });
              _this.run_twofish({
                input: ct1,
                key: _this.keys.twofish,
                iv: ivs.twofish
              }, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return ct2 = arguments[0];
                  };
                })(),
                lineno: 151
              }));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "src/enc.iced",
                  funcname: "Encryptor.run"
                });
                _this.run_aes({
                  input: ct2,
                  key: _this.keys.aes,
                  iv: ivs.aes
                }, __iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return ct3 = arguments[0];
                    };
                  })(),
                  lineno: 152
                }));
                __iced_deferrals._fulfill();
              })(function() {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "src/enc.iced",
                    funcname: "Encryptor.run"
                  });
                  _this.sign({
                    input: ct3,
                    key: _this.keys.hmac,
                    salt: _this.salt
                  }, __iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        return sig = arguments[0];
                      };
                    })(),
                    lineno: 153
                  }));
                  __iced_deferrals._fulfill();
                })(function() {
                  ret = (new WordArray(_this.version.header)).concat(_this.salt).concat(sig).concat(ct3).to_buffer();
                  return cb(null, ret);
                });
              });
            });
          });
        });
      });
    };

    return Encryptor;

  })(Base);

  exports.encrypt = encrypt = function(_arg, cb) {
    var data, enc, err, key, ret, rng, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    key = _arg.key, data = _arg.data, rng = _arg.rng;
    enc = new Encryptor({
      key: key,
      rng: rng
    });
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "src/enc.iced",
        funcname: "encrypt"
      });
      enc.run(data, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return ret = arguments[1];
          };
        })(),
        lineno: 179
      }));
      __iced_deferrals._fulfill();
    })(function() {
      util.scrub_buffer(data);
      enc.scrub();
      return cb(err, ret);
    });
  };

}).call(this);
