// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var ADRBG, PRNG, WordArray, browser_rng, e, more_entropy, native_rng, rng, __iced_k, __iced_k_noop, _prng, _ref;

  __iced_k = __iced_k_noop = function() {};

  more_entropy = require('more-entropy');

  ADRBG = require('./drbg').ADRBG;

  WordArray = require('./wordarray').WordArray;

  browser_rng = function(n) {
    var v;
    v = new Uint8Array(n);
    window.crypto.getRandomValues(v);
    return new Buffer(v);
  };

  if ((typeof window !== "undefined" && window !== null ? (_ref = window.crypto) != null ? _ref.getRandomValues : void 0 : void 0) != null) {
    native_rng = browser_rng;
  } else {
    try {
      rng = require('crypto').rng;
      if (rng != null) {
        native_rng = rng;
      }
    } catch (_error) {
      e = _error;
    }
  }

  if (native_rng == null) {
    throw new Error('No rng found; tried requiring "crypto" and window.crypto');
  }

  exports.PRNG = PRNG = (function() {
    function PRNG() {
      var _this = this;
      this.meg = new more_entropy.Generator();
      this.adrbg = new ADRBG(function(n, cb) {
        return _this.gen_seed(n, cb);
      });
    }

    PRNG.prototype.now_to_buffer = function() {
      var buf, d, ms, s;
      d = date.now();
      ms = d % 1000;
      s = d / 1000;
      buf = new buffer(8);
      buf.writeuint32be(s, 0);
      buf.writeuint32be(ms, 4);
      return buf;
    };

    PRNG.prototype.gen_seed = function(nbits, cb) {
      var bufs, n_bytes, wa, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      n_bytes = n_bits / 8;
      bufs = [];
      bufs.push(this.now_to_buffer());
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/rng.iced",
          funcname: "PRNG.gen_seed"
        });
        _this.meg.generate_bits(n_bits, words);
        __iced_deferrals._fulfill();
      })(function() {
        var _ref1;
        bufs.push(_this.now_to_buffer());
        bufs.push(new buffer(words));
        bufs.push(native_rng(n_bytes));
        bufs.push(_this.now_to_buffer());
        wa = wordarray.from_buffer((_ref1 = []).concat.apply(_ref1, bufs));
        return cb(wa);
      });
    };

    PRNG.prototype.generate = function(n, cb) {
      return this.adrbg(n, cb);
    };

    return PRNG;

  })();

  _prng = null;

  exports.generate_words = function(n, cb) {
    if (_prng == null) {
      _prng = new PRNG();
    }
    return _prng.generate(n, cb);
  };

}).call(this);
