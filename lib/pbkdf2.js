// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var HMAC, PBKDF2, WordArray, iced, pkbdf2, util, __iced_k, __iced_k_noop;

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  HMAC = require('./hmac').HMAC;

  WordArray = require('./wordarray').WordArray;

  util = require('./util');

  exports.PBKDF2 = PBKDF2 = (function() {
    function PBKDF2(_arg) {
      this.key = _arg.key, this.salt = _arg.salt, this.c = _arg.c;
      this.prf = new HMAC(this.key);
    }

    PBKDF2.prototype.PRF = function(input) {
      this.prf.reset();
      return this.prf.finalize(input);
    };

    PBKDF2.prototype.gen_T_i = function(_arg, cb) {
      var U, i, progress_hook, ret, seed, stop, what, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      i = _arg.i, progress_hook = _arg.progress_hook;
      what = "pkbdf2_gen_T_" + i;
      if (typeof progress_hook === "function") {
        progress_hook({
          what: what,
          total: this.c,
          i: 0
        });
      }
      seed = this.salt.clone().concat(new WordArray([i]));
      U = this.PRF(seed);
      ret = U.clone();
      i = 1;
      (function(__iced_k) {
        var _results, _while;
        _results = [];
        _while = function(__iced_k) {
          var _break, _continue, _next;
          _break = function() {
            return __iced_k(_results);
          };
          _continue = function() {
            return iced.trampoline(function() {
              return _while(__iced_k);
            });
          };
          _next = function(__iced_next_arg) {
            _results.push(__iced_next_arg);
            return _continue();
          };
          if (!(i < _this.c)) {
            return _break();
          } else {
            stop = Math.min(_this.c, i + 128);
            while (i < stop) {
              U = _this.PRF(U);
              ret.xor(U, {});
              i++;
            }
            if (typeof progress_hook === "function") {
              progress_hook({
                what: what,
                total: _this.c,
                i: i
              });
            }
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "src/pbkdf2.iced",
                funcname: "PBKDF2.gen_T_i"
              });
              util.default_delay(0, 0, __iced_deferrals.defer({
                lineno: 40
              }));
              __iced_deferrals._fulfill();
            })(_next);
          }
        };
        _while(__iced_k);
      })(function() {
        if (typeof progress_hook === "function") {
          progress_hook({
            what: what,
            total: _this.c,
            i: i
          });
        }
        return cb(ret);
      });
    };

    PBKDF2.prototype.gen = function(_arg, cb) {
      var bs, dkLen, flat, i, n, progress_hook, tmp, tph, words, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      dkLen = _arg.dkLen, progress_hook = _arg.progress_hook;
      bs = this.prf.get_output_size();
      n = Math.ceil(dkLen / bs);
      words = [];
      tph = null;
      (function(__iced_k) {
        var _i, _results, _while;
        i = 1;
        _results = [];
        _while = function(__iced_k) {
          var _break, _continue, _next;
          _break = function() {
            return __iced_k(_results);
          };
          _continue = function() {
            return iced.trampoline(function() {
              ++i;
              return _while(__iced_k);
            });
          };
          _next = function(__iced_next_arg) {
            _results.push(__iced_next_arg);
            return _continue();
          };
          if (!(i <= n)) {
            return _break();
          } else {

            if (progress_hook != null) {
              tph = function(arg) {
                return progress_hook({
                  what: "pbkdf2",
                  total: n * this.c,
                  i: i * this.c + arg.i
                });
              };
            }
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "src/pbkdf2.iced",
                funcname: "PBKDF2.gen"
              });
              _this.gen_T_i({
                i: i,
                progress_hook: tph
              }, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return tmp = arguments[0];
                  };
                })(),
                lineno: 55
              }));
              __iced_deferrals._fulfill();
            })(function() {
              return _next(words.push(tmp.words));
            });
          }
        };
        _while(__iced_k);
      })(function() {
        var _ref;
        flat = (_ref = []).concat.apply(_ref, words);
        _this.key.scrub();
        return cb(new WordArray(flat, dkLen));
      });
    };

    return PBKDF2;

  })();

  exports.pbkdf2 = pkbdf2 = function(_arg, cb) {
    var c, dkLen, eng, key, out, progress_hook, salt, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    key = _arg.key, salt = _arg.salt, c = _arg.c, dkLen = _arg.dkLen, progress_hook = _arg.progress_hook;
    eng = new PBKDF2({
      key: key,
      salt: salt,
      c: c
    });
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "src/pbkdf2.iced",
        funcname: "pkbdf2"
      });
      eng.gen({
        dkLen: dkLen,
        progress_hook: progress_hook
      }, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return out = arguments[0];
          };
        })(),
        lineno: 65
      }));
      __iced_deferrals._fulfill();
    })(function() {
      return cb(out);
    });
  };

}).call(this);
