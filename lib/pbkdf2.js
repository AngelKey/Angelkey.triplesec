// Generated by IcedCoffeeScript 1.6.3-f
(function() {
  var HMAC, PBKDF2, WordArray, iced, pkbdf2, __iced_k, __iced_k_noop;

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  HMAC = require('./hmac').HMAC;

  WordArray = require('./wordarray').WordArray;

  exports.PBKDF2 = PBKDF2 = (function() {
    function PBKDF2(_arg) {
      this.key = _arg.key, this.salt = _arg.salt, this.c = _arg.c;
      this.prf = new HMAC(this.key);
    }

    PBKDF2.prototype.PRF = function(input) {
      this.prf.reset();
      return this.prf.finalize(input);
    };

    PBKDF2.prototype.gen_T_i = function(i, cb) {
      var U, ret, seed, _i, _ref;
      seed = this.salt.clone().concat(new WordArray([i]));
      U = this.PRF(seed);
      ret = U.clone();
      for (i = _i = 1, _ref = this.c; 1 <= _ref ? _i < _ref : _i > _ref; i = 1 <= _ref ? ++_i : --_i) {
        U = this.PRF(U);
        ret.xor(U, {});
      }
      return cb(ret);
    };

    PBKDF2.prototype.gen = function(len, cb) {
      var bs, flat, i, n, tmp, words, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      bs = this.prf.get_output_size();
      n = Math.ceil(len / bs);
      words = [];
      (function(__iced_k) {
        var _i, _results, _while;
        i = 1;
        _results = [];
        _while = function(__iced_k) {
          var _break, _continue, _next;
          _break = function() {
            return __iced_k(_results);
          };
          _continue = function() {
            return iced.trampoline(function() {
              ++i;
              return _while(__iced_k);
            });
          };
          _next = function(__iced_next_arg) {
            _results.push(__iced_next_arg);
            return _continue();
          };
          if (!(i <= n)) {
            return _break();
          } else {

            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "src/pbkdf2.iced",
                funcname: "PBKDF2.gen"
              });
              _this.gen_T_i(i, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return tmp = arguments[0];
                  };
                })(),
                lineno: 41
              }));
              __iced_deferrals._fulfill();
            })(function() {
              return _next(words.push(tmp.words));
            });
          }
        };
        _while(__iced_k);
      })(function() {
        var _ref;
        flat = (_ref = []).concat.apply(_ref, words);
        _this.key.scrub();
        return cb(new WordArray(flat, len));
      });
    };

    return PBKDF2;

  })();

  exports.pbkdf2 = pkbdf2 = function(_arg, cb) {
    var c, dkLen, eng, key, out, salt, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    key = _arg.key, salt = _arg.salt, c = _arg.c, dkLen = _arg.dkLen;
    eng = new PBKDF2({
      key: key,
      salt: salt,
      c: c
    });
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "src/pbkdf2.iced",
        funcname: "pkbdf2"
      });
      eng.gen(dkLen, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return out = arguments[0];
          };
        })(),
        lineno: 51
      }));
      __iced_deferrals._fulfill();
    })(function() {
      return cb(out);
    });
  };

}).call(this);
