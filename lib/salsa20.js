// Generated by IcedCoffeeScript 1.6.3-f
(function() {
  var Counter, Salsa20, WordArray, asum, fixup_uint32;



  WordArray = require('./wordarray').WordArray;

  Counter = require('./ctr').Counter;

  fixup_uint32 = require('./util').fixup_uint32;

  asum = function(out, v) {
    var e, i, _i, _len;
    for (i = _i = 0, _len = v.length; _i < _len; i = ++_i) {
      e = v[i];
      out[i] += e;
    }
    return false;
  };

  exports.Salsa20 = Salsa20 = (function() {
    Salsa20.prototype.sigma = WordArray.from_buffer_le(new Buffer("expand 32-byte k"), 16);

    Salsa20.prototype.tau = WordArray.from_buffer_le(new Buffer("expand 16-byte k"), 16);

    Salsa20.prototype.block_size = 64;

    Salsa20.prototype.rounds = 20;

    function Salsa20(key, nonce) {
      var _ref;
      this.key = key;
      this.nonce = nonce;
      if (!(((this.key.sigBytes === 16) && (this.nonce.sigBytes === 8)) || ((this.key.sigBytes === 32) && ((_ref = this.nonce.sigBytes) === 8 || _ref === 24)))) {
        throw "Bad key/none lengths";
      }
      this.input = [];
      this.key_setup();
      this.iv_setup();
      this._reset();
    }

    Salsa20.prototype.key_setup = function() {
      var A, C, i, _i, _j, _k, _ref, _results;
      for (i = _i = 0; _i < 4; i = ++_i) {
        this.input[i + 1] = this.key.words[i];
      }
      _ref = this.key.sigBytes === 32 ? [this.sigma, this.key.words.slice(4)] : [this.tau, this.key.words], C = _ref[0], A = _ref[1];
      for (i = _j = 0; _j < 4; i = ++_j) {
        this.input[i + 11] = A[i];
      }
      _results = [];
      for (i = _k = 0; _k < 4; i = ++_k) {
        _results.push(this.input[i * 5] = C.words[i]);
      }
      return _results;
    };

    Salsa20.prototype.iv_setup = function() {
      this.input[6] = this.nonce.words[0];
      return this.input[7] = this.nonce.words[1];
    };

    Salsa20.prototype.counter_setup = function() {
      this.input[8] = this.counter.get().words[0];
      return this.input[9] = this.counter.get().words[1];
    };

    Salsa20.prototype._reset = function() {
      this.counter = new Counter({
        len: 2
      });
      this.block = new Buffer(this.block_size);
      return this._i = this.block_size;
    };

    Salsa20.prototype.getBytes = function(needed) {
      var bsz, n, v;
      v = [];
      bsz = this.block_size;
      while (needed > 0) {
        if (this._i === bsz) {
          this._generateBlock();
          this.counter.inc_le();
          this._i = 0;
        }
        n = Math.min(needed, bsz - this._i);
        v.push((n === bsz ? this.block : this.block.slice(this._i, this._i + n)));
        this._i += n;
        needed -= n;
      }
      return Buffer.concat(v);
    };

    Salsa20.prototype._generateBlock = function() {
      var e, i, v, _i, _len, _results;
      this.counter_setup();
      v = this._core(this.input);
      asum(v, this.input);
      _results = [];
      for (i = _i = 0, _len = v.length; _i < _len; i = ++_i) {
        e = v[i];
        _results.push(this.block.writeUInt32LE(fixup_uint32(e), i * 4));
      }
      return _results;
    };

    Salsa20.prototype._core = function(v) {
      var i, u, x0, x1, x10, x11, x12, x13, x14, x15, x2, x3, x4, x5, x6, x7, x8, x9, _i, _ref;
      x0 = v[0], x1 = v[1], x2 = v[2], x3 = v[3], x4 = v[4], x5 = v[5], x6 = v[6], x7 = v[7], x8 = v[8], x9 = v[9], x10 = v[10], x11 = v[11], x12 = v[12], x13 = v[13], x14 = v[14], x15 = v[15];
      for (i = _i = 0, _ref = this.rounds; _i < _ref; i = _i += 2) {
        u = x0 + x12;
        x4 ^= (u << 7) | (u >>> (32 - 7));
        u = x4 + x0;
        x8 ^= (u << 9) | (u >>> (32 - 9));
        u = x8 + x4;
        x12 ^= (u << 13) | (u >>> (32 - 13));
        u = x12 + x8;
        x0 ^= (u << 18) | (u >>> (32 - 18));
        u = x5 + x1;
        x9 ^= (u << 7) | (u >>> (32 - 7));
        u = x9 + x5;
        x13 ^= (u << 9) | (u >>> (32 - 9));
        u = x13 + x9;
        x1 ^= (u << 13) | (u >>> (32 - 13));
        u = x1 + x13;
        x5 ^= (u << 18) | (u >>> (32 - 18));
        u = x10 + x6;
        x14 ^= (u << 7) | (u >>> (32 - 7));
        u = x14 + x10;
        x2 ^= (u << 9) | (u >>> (32 - 9));
        u = x2 + x14;
        x6 ^= (u << 13) | (u >>> (32 - 13));
        u = x6 + x2;
        x10 ^= (u << 18) | (u >>> (32 - 18));
        u = x15 + x11;
        x3 ^= (u << 7) | (u >>> (32 - 7));
        u = x3 + x15;
        x7 ^= (u << 9) | (u >>> (32 - 9));
        u = x7 + x3;
        x11 ^= (u << 13) | (u >>> (32 - 13));
        u = x11 + x7;
        x15 ^= (u << 18) | (u >>> (32 - 18));
        u = x0 + x3;
        x1 ^= (u << 7) | (u >>> (32 - 7));
        u = x1 + x0;
        x2 ^= (u << 9) | (u >>> (32 - 9));
        u = x2 + x1;
        x3 ^= (u << 13) | (u >>> (32 - 13));
        u = x3 + x2;
        x0 ^= (u << 18) | (u >>> (32 - 18));
        u = x5 + x4;
        x6 ^= (u << 7) | (u >>> (32 - 7));
        u = x6 + x5;
        x7 ^= (u << 9) | (u >>> (32 - 9));
        u = x7 + x6;
        x4 ^= (u << 13) | (u >>> (32 - 13));
        u = x4 + x7;
        x5 ^= (u << 18) | (u >>> (32 - 18));
        u = x10 + x9;
        x11 ^= (u << 7) | (u >>> (32 - 7));
        u = x11 + x10;
        x8 ^= (u << 9) | (u >>> (32 - 9));
        u = x8 + x11;
        x9 ^= (u << 13) | (u >>> (32 - 13));
        u = x9 + x8;
        x10 ^= (u << 18) | (u >>> (32 - 18));
        u = x15 + x14;
        x12 ^= (u << 7) | (u >>> (32 - 7));
        u = x12 + x15;
        x13 ^= (u << 9) | (u >>> (32 - 9));
        u = x13 + x12;
        x14 ^= (u << 13) | (u >>> (32 - 13));
        u = x14 + x13;
        x15 ^= (u << 18) | (u >>> (32 - 18));
      }
      return [x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15];
    };

    return Salsa20;

  })();

}).call(this);
