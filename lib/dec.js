// Generated by IcedCoffeeScript 1.6.3-f
(function() {
  var AES, Base, Decryptor, SHA512, Salsa20, TwoFish, V, WordArray, ctr, decrypt, hmac, pbkdf2, salsa20, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };



  WordArray = require('./wordarray').WordArray;

  salsa20 = require('./salsa20');

  AES = require('./aes').AES;

  TwoFish = require('./twofish').TwoFish;

  ctr = require('./ctr');

  hmac = require('./hmac');

  SHA512 = require('./sha512').SHA512;

  pbkdf2 = require('./pbkdf2').pbkdf2;

  Salsa20 = require('./salsa20').Salsa20;

  _ref = require('./enc'), Base = _ref.Base, V = _ref.V;

  exports.Decryptor = Decryptor = (function(_super) {
    __extends(Decryptor, _super);

    Decryptor.prototype.version = V[1];

    function Decryptor(_arg) {
      var key;
      key = _arg.key;
      Decryptor.__super__.constructor.call(this, {
        key: key
      });
      this._i = 0;
    }

    Decryptor.prototype.read_header = function() {
      var wa;
      wa = this.ct.unshift(2);
      if (wa == null) {
        throw new Error("Ciphertext underrun in header");
      }
      if (!wa.equal(new WordArray(this.version.header))) {
        throw new Error("Bad header");
      }
    };

    Decryptor.prototype.verify_sig = function(key) {
      var computed, received;
      received = this.ct.unshift(hmac.HMAC.outputSize / 4);
      if (received == null) {
        throw new Error("Ciphertext underrun in signature");
      }
      computed = this.sign({
        input: this.ct,
        key: key,
        salt: this.salt
      });
      if (!received.equal(computed)) {
        throw new Error('Signature mismatch!');
      }
    };

    Decryptor.prototype.unshift_iv = function(n_bytes, which) {
      var iv;
      if ((iv = this.ct.unshift(n_bytes / 4)) == null) {
        throw new Error("Ciphertext underrun in " + which);
      }
      return iv;
    };

    Decryptor.prototype.read_salt = function() {
      this.salt = this.ct.unshift(2);
      if (!this.salt) {
        throw new Error("Ciphertext underrrun in read_salt");
      }
      return this;
    };

    Decryptor.prototype.generate_keys = function() {
      this.keys = this.pbkdf2(this.salt);
      return this;
    };

    Decryptor.prototype.run = function(data) {
      var ct1, ct2, pt;
      this.ct = WordArray.from_buffer(data);
      this.read_header();
      this.read_salt();
      this.generate_keys();
      this.verify_sig(this.keys.hmac);
      ct2 = this.run_aes({
        iv: this.unshift_iv(AES.ivSize),
        input: this.ct,
        key: this.keys.aes
      });
      ct1 = this.run_twofish({
        iv: this.unshift_iv(TwoFish.ivSize),
        input: this.ct,
        key: this.keys.twofish
      });
      pt = this.run_salsa20({
        iv: this.unshift_iv(Salsa20.ivSize),
        input: this.ct,
        key: this.keys.salsa20,
        output_iv: false
      });
      return pt.to_buffer();
    };

    return Decryptor;

  })(Base);

  exports.decrypt = decrypt = function(_arg) {
    var data, dec, key, pt;
    key = _arg.key, data = _arg.data;
    dec = new Decryptor({
      key: key
    });
    pt = dec.run(data);
    dec.scrub();
    return pt;
  };

}).call(this);
