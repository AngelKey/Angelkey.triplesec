// Generated by IcedCoffeeScript 1.6.3-f
(function() {
  var DRBG, WordArray, hmac, sha512;



  hmac = require('./hmac');

  sha512 = require('./sha512');

  WordArray = require('./wordarray').WordArray;

  exports.DRBG = DRBG = (function() {
    function DRBG(entropy, personalization_string) {
      this.security_strength = 256;
      entropy = this.check_entropy(entropy);
      this._instantiate(entropy, personalization_string);
    }

    DRBG.prototype.check_entropy = function(entropy) {
      var out;
      if ((entropy.sigBytes * 8 * 2) < (3 * this.security_strength)) {
        throw new Error("entropy must be at least %f bits." % (1.5 * this.security_strength));
      } else if (entropy.SigBytes * 8 > 1000) {
        out = sha512.transform(entropy);
        entropy.scrub();
        return out;
      } else {
        return entropy;
      }
    };

    DRBG.prototype._hmac = function(key, input) {
      return hmac.sign({
        key: key,
        input: input
      });
    };

    DRBG.prototype._update = function(provided_data) {
      var V, V_in;
      V = new WordArray([0], 1);
      if (provided_data != null) {
        V = V.concat(provided_data);
      }
      V_in = this.V.clone().concat(V);
      this.K = this._hmac(this.K, V_in);
      V_in.scrub();
      V.scrub();
      this.V = this._hmac(this.K, this.V);
      if (provided_data != null) {
        V_in = this.V.clone().concat(new WordArray([1 << 24], 1)).concat(provided_data);
        this.K = this._hmac(this.K, V_in);
        V_in.scrub();
        this.V = this._hmac(this.K, this.V);
      }
      return provided_data != null ? provided_data.scrub() : void 0;
    };

    DRBG.prototype._instantiate = function(entropy, personalization_string) {
      var i, n, seed_material;
      seed_material = entropy.concat(personalization_string);
      n = 64;
      this.K = WordArray.from_buffer(new Buffer((function() {
        var _i, _results;
        _results = [];
        for (i = _i = 0; 0 <= n ? _i < n : _i > n; i = 0 <= n ? ++_i : --_i) {
          _results.push(0);
        }
        return _results;
      })()));
      this.V = WordArray.from_buffer(new Buffer((function() {
        var _i, _results;
        _results = [];
        for (i = _i = 0; 0 <= n ? _i < n : _i > n; i = 0 <= n ? ++_i : --_i) {
          _results.push(1);
        }
        return _results;
      })()));
      this._update(seed_material);
      console.log(this.K.to_hex());
      console.log(this.V.to_hex());
      entropy.scrub();
      return this.reseed_counter = 1;
    };

    DRBG.prototype.reseed = function(entropy) {
      this._update(this.check_entropy(entropy));
      return this.reseed_counter = 1;
    };

    DRBG.prototype.generate = function(num_bytes) {
      var tmp, _ref;
      if ((num_bytes * 8) > 7500) {
        throw new Error("generate cannot generate > 7500 bits in 1 call.");
      }
      if (this.reseed_counter >= 10000) {
        throw new Error("Need a reseed!");
      }
      tmp = [];
      while ((tmp.length === 0) || (tmp.length * tmp[0].length * 4) < num_bytes) {
        this.V = this._hmac(this.K, this.V);
        tmp.push(this.V.words);
      }
      console.log("After generate ->");
      console.log(this.V.to_hex());
      console.log(this.K.to_hex());
      this._update();
      this.reseed_counter += 1;
      return new WordArray((_ref = []).concat.apply(_ref, tmp));
    };

    return DRBG;

  })();

}).call(this);
